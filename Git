# Git



## Git概述

- Git是免費 開源的分布式版本控制系統 可以快速高效的處理從小型到大型的各種項目
- Git易於學習 占用體積小 性能高 具有廉價的本地庫 方便暫存區愈和多個工作分支等特性



#### 何謂版本控制

- 記錄文件內容變化 以便將來查閱特定版本修訂情況的系統
- 版本控制最重要的是可以記錄文件修改歷史記錄 從而讓用戶能夠查看歷史版本 方便版本切換



#### 版本控制工具

- 集中式
  - 有一個單一的集中管理的伺服器 保存所有文件的修訂版本
  - 協同工作的人都通過客戶端連接到這台伺服器 取得最新的文件或者提交更新
  - 優點
    - 每個人都可以在一定程度上看到項目中的其他人正在做些什麼
    - 管理員也可以輕鬆掌控每個開發者的權限 並且管理一個集中化的版本控制系統 比在各個客戶端上維護本地數據庫來得容易
  - 缺點
    - 如果中央伺服器故障就無法提交更新 也無法取得最新的文件 也就無法進行工作
- 分布式 (Git)
  - 客戶端提取的不是最新版本的文件 而是將程式碼倉庫完整的鏡像下來 (本地庫) 這樣任何一處協同工作用的文件發生故障 事後都可以用一他客戶端的本地倉庫進行恢復 因為每個客戶端的每一次文件提取操作 實際上都是一次對整個文件倉庫的完整備份
  - 將寫好的程式推送到遠程的資料庫 (Github)
  - 遠程資料庫異常時
    - 也可以在本地進行自己的版本控制工具
    - 只是無法進行程式碼的上傳推送



#### Git工作機制

- 分為三個區域
  - 工作區
    - 程式碼存放的硬碟的位置
  - 暫存區
    - 將工作區的程式碼添加到暫存區 git add 
  - 本地庫
    - 將暫存區的程式碼提交到本地庫 git commit
    - 會生成對應的歷史版本  一旦生成歷史版本 程式碼就無法刪除了
  - 遠程庫
    - 從本地庫將程式碼推送到遠程庫 push

![20126182xlSp2mMJF9](https://i.imgur.com/GYZaTLG.png)



#### Git和程式碼託管中心

- 程式碼的託管中心是基於網路伺服器的遠程程式碼倉庫 一般我們簡單稱為遠程庫
- 網際網路上
  - GitHub
- 區域網路上
  - GitLab





## Git安裝

Git Bash : Unix與Linux風格的命令行 使用最多

Git CMD : Windows風格的命令行

Git GUI : 圖形介面的Git 不建議使用 先熟悉常用命令





## Git常用命令

| 命名名稱                            | 作用           |
| ----------------------------------- | -------------- |
| git config --global username 用戶名 | 設置用戶簽名   |
| git config --global user.email 信箱 | 設置用戶簽名   |
| git init                            | 初始化本地庫   |
| git status                          | 查看本地庫狀態 |
| git add 文件名                      | 添加到暫存區   |
| git commit -m "日誌訊息" 文件名     | 提交到本地庫   |
| git reflog                          | 查看歷史記錄   |
| git reset --hard 版本號             | 版本穿梭       |

- 用戶簽名
  - 簽名的作用是區分不同操作者身分 
  - 用戶的簽名訊息在每一個版本的提交訊息中能夠看到
  - 以此確認本次提交是誰做的
- Git首次安裝必須設置一下用戶簽名 否則無法提交程式碼
- 這裡設置的用戶簽名與登錄的GitHub的帳號沒有任何關係



#### 初始化本地庫

- 基本語法
- 初始化

```
git init
```

- 查看本地庫狀態

```
git status
```

- 查看檔案狀態

```
cat 檔案名
```



#### 提交資料到暫存區

```
git add hello.txt
```

##### 將暫存區的資料轉回工作區

```
$ git rm --cached hello.txt
```



#### 將暫存區文件提交到本地庫

- 將暫存區的文件提交到本地庫
- 基本語法

```
git commit -m "版本日誌訊息" 文件名
```



#### 修改文件

Crtl + L 翻到空白頁

修改文件 i  insert

修改後退出 shift + Z Z

修改後退出 :WQ

複製 Ctrl + insert

貼上 Shift + insert

- 基本語法

```
vim hello.txt
```





#### 歷史版本

查看歷史版本

- 基本語法

- 查看版本訊息

```
git reflog
```

- 查看版本詳細訊息
  - 可以看到提交的版本 也可以看到提交的人

```
git log
```



##### 版本穿越

- 基本語法

``` java
git reset --hard 版本號
```

- 分支指向的版本號全名
- 可以在head資料夾中的master查看 目前指向的是這個檔案
- 改變版本同時會直接更改資料夾下該檔案的內容

```
commit 791a63d4a91c8a1f20a1342981c66640e696b3ab (HEAD -> master)
```



## Git分支操作



#### 什麼是分支

- 在版本控制過程中 同時推進多個任務 
- 為每個任務 我們可以創建每個任務的單獨分支
- 使用分支意味著工程師可以把自己的工作從開發主線上分離開來
- 開發自己分支的時候 不會影響主線分支的運行
- 可以簡單理解成副本 一個分支就是一個單獨的副本 
  - 分支底層也就是指針的引用



#### 分支的優點

- 同時並行推進多個功能開發 提高開發效率
- 各個分支在開發過程中 如果某一個分支開發失敗 不會對其他分支有任何影響 失敗的分支刪除重新開始即可



#### 分支的操作

| 命令名稱            | 作用                         |
| ------------------- | ---------------------------- |
| git branch 分支名   | 創建分支                     |
| git branch -v       | 查看分支                     |
| git checkout 分支名 | 切換分支                     |
| git merge 分支名    | 把指定的分支合併到當前分支上 |



##### 查看分支

```
git branch -v
```



##### 創建分支

```
git branch 分支名
```



##### 修改分支

- 切換分支後  檔案指向的是分支的檔案
- 與普通修改一樣進行修改

```
vim hello.txt
```



##### 切換分支

```
git checkout 分支名
```



##### 合併分支

```
git merge 分支名
```



##### 產生衝突

- 兩個分支在同一個文件的同一個位置 有兩套完全不同的修改
- git無法決定我們使用哪一個 需要人為決定內容

此時需要手動修改

- 打開文件 進行修改

```
vim 文件名
```

- 修改完需要重新提交到暫存區

```
git add 文件名
```

- 執行提交  此時git commit命令時不能攜帶文件名

```
git commit -m "敘述"
```

合併分支只會修改主要的合併分支

對於被合併的分支裡面的資料 不會進行修改



#### 創建分支 切換分支

- master 和 hot-fix都是指向具體版本紀錄的指針
- 當前所在的分支 是由HEAD決定的 所以創建分支的本質就是多創建一個指針
  - HEAD指向master  那麼現在就在master分支上
  - HEAD指向hotfix 那麼現在就在hotfix分支上
- 所以切換分支的本質就是移動HEAD指針



## Git團隊協作機制

#### 團隊內協作

- 第一個人從自己的本地庫push資料到遠程庫
- 之後其他人clone將資料拿到自己的本地庫 進行更新遠程庫
  - push上去後需要經過認定  認定成功才能push
- 之後可以將更新過的遠程庫pull拉回到自己的本地庫  進行全部資料的版本同步



#### 跨團隊協作

- 將A的遠程庫 fork 插入到B的遠程庫中 做為一個分支
- B可以從遠程庫中 clone 資料到自己的本地庫中
- B進行修改 版本更新完後 push 資料到 B的遠程庫
- B 發送 pull request 請求給 A 進行審核  與 A的遠程庫合併 merge
- 再從A的遠程庫 pull 資料到自己的本地庫





## GitHub操作



##### 創建遠程倉庫

- 取得遠程倉庫的連結



##### 遠程倉庫操作

| 命令名稱                           | 作用                                                     |
| ---------------------------------- | -------------------------------------------------------- |
| git remote -v                      | 查看當前所有遠程地址別名                                 |
| git remote add 別名 遠程地址       | 取別名                                                   |
| git push 別名 分支                 | 推送本地分支上的內容到遠程倉庫                           |
| git clone 遠程地址                 | 將遠程倉庫的內容複製到本地                               |
| git pull 遠程庫地址別名 遠程分支名 | 將遠程倉庫對於分支最新內容拉下來後與當前本地分支直接合併 |



##### 創建遠程倉庫別名

- 基本語法

```
git remote -v 查看當前所有遠程地址別名
git remote add 別名 遠程地址
```

- 實際操作

```
$ git remote add git-demo https://github.com/wsx0305405/git-connector-demo.git
```



##### 推送本地分支到遠程倉庫

- 基本語法

git push 別名 分支

- 實際操作

```
$ git push git-demo master
```



##### 拉取遠程庫到本地庫

```
git pull git-demo master
```



##### 複製遠程倉庫到本地

- 基本語法

```
git clone 遠程地址
```

- 實際操作

```
git clone https://github.com/wsx0305405/git-connector-demo.git
```

clone會做如下的操作

- 拉取程式碼
- 初始化本地倉庫
- 創建別名

```
$ git remote -v
origin  https://github.com/wsx0305405/git-connector-demo.git (fetch)
origin  https://github.com/wsx0305405/git-connector-demo.git (push)
```



##### 邀請加入團隊

- 專案的設定中尋找邀請成員發送邀請

- 團隊成員可以將程式推送到遠程庫

```
$ git push https://github.com/wsx0305405/git-connector-demo.git master
```

- 團隊的其他成員可以更新他們的程式
  - 將最新版本的程式拉取到自己的本地庫

```
$ git pull git-demo master
```



#### 跨團隊協作

- 團隊外成員使用 fork 將檔案複製一份到自己的專案中
- 修改完成後 使用 pull request 傳送回原本團隊內的成員
- 經過團隊內成員的審核後 決定是否merge加入原本的專案



#### SSH 免密碼登入

- 在使用者的資料夾下 生成.ssh文件

```
$ ssh-keygen -t rsa -C 綁定用戶
```

- 將公鑰複製到對應的github設置中





## IDEA集成Git



#### 配置Git忽略文件

- 為什麼要忽略
  - 與項目的實際功能無關 不參與伺服器上部屬運行 把他們忽略掉能夠遮蔽IDEA工具之間的差異
- 怎麼忽略
  - 創建忽略規格文件 xxxx.ignore
  - 這個文件的存放位置原則上沒有限制 為了便於讓 ~/.gitconfig文件引用 建議放在用戶資料夾下
- gitconfig的引用

```
[core]
	excludesfile = C:/Users/username/git.ingore
```



- 範例格式

```
#Compiled class file
*.class

# Log file
*.log

#BlueJ files
*.ctxt

#Mobile Tools for Java (J2ME)
.mtj.tmp/

#Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs
hs_err_pid*

.classpath
.project
.settings
target
.idea
*.iml
```



#### 定位Git程序

- 在IDEA的設定中 尋找安裝的Git中 bin下面的git.exe檔案



#### 初始化本地庫

- 將需要由Git管理的專案 加入Git的管理



#### 創建分支

- 由IDEA的右下角區塊 可以創建 切換分支
- 同時也顯示了當前所在的分支



#### 合併分支



#### 合併衝突



## IDEA集成GitHub



#### 設置GitHub帳號



#### 分享工程到GitHub



#### push推送本地庫到遠程庫

- push是將本地庫推送到遠程庫 如果本地庫跟遠程庫的版本不一致
- push是會被拒絕的 也就是 push成功的條件 一定要保證本地庫的版本比遠程庫的版本更新
- 因此 動手改動本地程式碼前 一定要檢查遠程庫跟本地庫的程式區別 
- 如果本地庫的版本已經落後 就要先pull拉取一下遠程庫的程式碼 將本地庫更新到最新的版本 再進行修改 提交 推送



#### 忽略文件.gitignore



#### pull拉取遠程庫到本地庫

- pull是拉取遠程庫的程式碼到本地庫
- 如果遠程庫的程式碼跟本地庫的程式不一致 會自動合併 如果自動合併失敗 會涉及到手動解決衝突問題



#### clone遠程庫到本地庫







## 自行建立程式碼託管 GitLab

















# GIT(2)



## 版本控制

- 開發過程中用於管理我們對文件 目錄 工程等內容的修改歷史
- 方便查看更改歷史記錄 備份恢復以前的版本的工程技術

特色

- 實現跨區域多人協同開發
- 追蹤和記載一個或多個文件的歷史記錄
- 組織和保護源代碼和文檔
- 統計工作量
- 並行開發 提高開發效率
- 跟蹤記錄整個軟體的開發過程
- 減輕開發人員的負擔 節省時間 同時降低人為錯誤

簡單來說是用於管理多人協同開發項目的技術

沒有進行版本控制或者版本控制本身缺乏正確的流程管理 在開發過程中將會產生很多問題

- 如軟體程式碼的一致性 
- 軟體內容的冗余 
- 軟體過程的事務性 
- 軟體開發過程中的並發性 
- 軟體源代碼的安全性 
- 軟體整合等問題

無論工作或是學習或是做筆記 都經歷過這樣的階段 我們就需要一個版本控制工具

多人開發必須使用版本控制 



## 常見的版本控制工具

主流的版本控制器

- Git
- SVN (Subversion)
- CVS (Concurrent Versions System)
- VSS (Microsoft Visual SourceSafe)
- TFS (Team Foundation Server)
- Visual Studio Online



## 版本控制分類



#### 本地版本控制

- 記錄文件每次的更新 可以對每個版本做一個對照 或是記錄更新文件 適合個人用



#### 集中版本控制 SVN

- 所有的版本資料都保存在伺服器上 協同開發者從伺服器上同步更新或上傳自己的修改
- 所有的版本數據都存在伺服器上 
- 用戶本地只有自己以前所同步的版本 
- 如果不連接伺服器 用戶就看不到歷史版本 也無法切換版本驗證問題 或在不同分支工作 
- 而且 所有數據都保存在單一的伺服器上 如果伺服器損壞 這樣就會丟失所有的數據 必須做好定期備份 
- 代表產品 : SVN CVS VSS



#### 分布式版本控制 Git

- 每個人都擁有全部的程式碼 安全隱憂
- 所有版本訊息倉庫全部同步到本地的每個用戶 這樣就可以在本地查看所有版本歷史 
- 可以在離線時在本地提交 只需在連網時push到相應的伺服器或其他用戶那裡 
- 由於每個用戶保存的是所有版本數據 只要有一個用戶的設備沒有問題 就可以恢復所有的數據 但增加了本地儲存空間的占用
- 不會因為伺服器損壞或是網路問題 造成不能工作的情況



#### Git SVN 區別

SVN

- SVN是集中式版本控制系統
- 版本庫是集中放在中央伺服器
- 工作時則是從中央伺服器中取得最新的版本到自己的電腦
- 工作完成後要把更新過的數據傳回中央伺服器
- 集中式版本控制系統必須連上網路才能工作

Git

- Git是分布式版本控制系統 沒有中央伺服器 每個人的電腦就是一個完整的版本庫
- 工作的時候不需要連上網路 因為版本都在電腦上
- 協同的方法
  - 在自己的電腦上更新了文件A 其他人也在電腦上更新的文件A
  - 這時只要雙方把更新的文件傳送給對方 就可以互相看到對方的修改了
- Git可以直接看到更新了哪些程式碼漢文件
- Git是目前世界上最先進的分布式版本控制系統



## 安裝Git

Git Bash : Unix與Linux風格的命令行 使用最多

Git CMD : Windows風格的命令行

Git GUI : 圖形介面的Git 不建議使用 先熟悉常用命令



## 常用的Linux命令

cd 改變目錄  

cd..  回到上一個目錄 直接cd進入預設目錄

pwd 顯示目前所在的目錄路徑

ls(ll)  都是列出當前目錄中的所有文件 但是 ll 列出的內容更為詳細

touch 新建一個文件 如 touch index.js 就會在當前目錄下新建一個index.js文件

rm  刪除一個文件  rm index.js 就會把index.js文件刪除

mkdir  新建一個目錄 就是新建一個資料夾

rm -r  刪除一個資料夾  rm -r src 刪除src目錄

```
rm -rf /  清理所有東西 遞迴方式刪除  把所有東西刪掉 電腦全部格式化
```

mv  移動資料  mv index.html src

​		 index.html 是我們要移動的文件  src是目標資料夾   兩個物件要在同一個路徑下

reset   重新初始化終端 / 清除螢幕

clear  清除螢幕

history  查看命令歷史

help  幫助

exit  退出

#表示註釋





## Git 配置

所有配置文件都保存在電腦中

```
查看配置 git config -l
```

查看不同級別的配置文件

```
#查看系統config
git config --system --list
#查看目前用戶(global) 配置
git config --global --list
```

![擷取_2022_01_18_11_43_56_167](A:\video\擷取_2022_01_18_11_43_56_167.png)



#### Git相關配置文件

- Git\etc\gitconfig : Git安裝目錄下的gitconfig  --system系統級

```
[diff "astextplain"]
	textconv = astextplain
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	sslBackend = openssl
	sslCAInfo = C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
[core]
	autocrlf = true
	fscache = true
	symlinks = false
[pull]
	rebase = false
[credential]
	helper = manager-core
[credential "https://dev.azure.com"]
	useHttpPath = true
[init]
	defaultBranch = master
```



- 適合於當前登入用戶的配置 global全局
  - 這裡可以直接編輯配置文件 通過命令設置後會響應到這裡



#### 設置 name email (必要)

- 安裝Git首先要確認用戶名稱和email是被設置過的 因為Git的每次提交都會使用該訊息 他將永遠嵌入到提交中

```
$ git config --global user.name "username"

$ git config --global user.email "name@email.com"
```

- 只需要做一次這個設置 
- 如果傳遞了global選項 因為Git將總是會使用該訊息處理系統中所做的一切操作 
- 如果希望在一個特定的項目中使用不同的名稱或email 可以在該項目中運行該命令而不要global選項  
- global為全局配置 不加入的話為某個項目的特定配置





## Git基本理論 (核心)

- 工作區域 分為三個
  - 工作目錄 (Working Directory)
  - 暫存區 (Stage/index)
  - 資源庫 (Repository or Git_Directory)
- 如果加上遠端的git倉庫 (Remote Directory) 就可以分為四個工作區域 
- 文件在四個區域間的轉換關係

![e4656c7e3733ce82821f2a015333c30b](A:\video\e4656c7e3733ce82821f2a015333c30b.png)

- Workspace : 工作區 就是平時存放項目程式碼的地方
- Index/Stage : 暫存區 用於臨時存放改動 事實上它只是一個文件 保存即將提交到文件列表訊息
- Repository : 倉庫區 (本地倉庫) 就是安全存放資料的位置 裡面有提交到所有版本的數據 其中HEAD指向最新放入倉庫的版本
- Remote : 遠程倉庫  代理保管程式碼的伺服器  可以簡單地認為是項目組中的一台電腦用於遠端資料交換

本地的三個區域確切的說應該是git倉庫中HEAD指向的版本



- Directory : 使用Git管理的一個目錄 也就是一個倉庫 包含我們的工作空間和Git的管理空間
- WorkSpace : 需要通過Git進行版本控制的目錄和文件 這些目錄和文件組成了工作空間
- .git : 存放Git管理訊息的目錄 初始化倉庫的時候自動創建
- Index/Stage : 暫存區 或者叫待提交更新區 在提交進入repo之前 我們可以把所有的更新放在暫存區
- Local Repo :  本地倉庫 一個存放在本地的版本庫  HEAD會只是當前的開發分支 (branch)
- Stash : 隱藏 是一個工作狀態保存棧 (stack)  用於保存/恢復WorkSpace中的臨時狀態



#### 工作流程

git的工作流程

- 在工作目錄中添加 修改文件  (UserMapper.xml)
- 將需要進行版本管理的文件放入暫存區域 (git add..)
- 將暫存區育的文件提交到git倉庫 (git commit)

因此 git管理的文件有三種狀態 : 已修改 (modified) 已暫存 (staged)  已提交 (committed)





## Git項目搭建

- 工作目錄 (WorkSpace) 一般希望Git幫助管理資料夾  可以是項目的目錄 也可以是一個空目錄
- 一般要記住下面六個命令



![1730228e83b542b9a7b7192afb6b8491_tplv-k3u1fbpfcp-zoom-1](A:\video\1730228e83b542b9a7b7192afb6b8491_tplv-k3u1fbpfcp-zoom-1.png)

創建本地倉庫

- 創建全新的倉庫
  - 執行後會看到目錄下多了 .git 關於版本等的所有訊息都在裡面

```
$git init
```



- 複製遠程倉庫

```
$ git clone [url]
```



## Git文件操作

文件的4種狀態

版本控制就是對文件的版本控制 要對文件進行修改 提交等操作

首先要知道文件目前是什麼狀態 不然可能會造成提交了現在還不想提交的文件 或是提交的文件沒有提交上

##### Untracked (未跟蹤) 

- 此文件在資料夾中 但並沒有加入到git庫 不參與版本控制 通過 **git add** 狀態變為 **Staged** 

##### Unmodify (未修改) 

- 文件已經入庫 即版本庫中的文件快照內容與資料夾完全一致 有兩種做法

  - 如果他被修改 而變為 **Modified**

  - 如果使用 git rm 移出版本庫 則成為 **Untracked**

##### Modified (已修改) 

- 僅僅是修改 並沒有進行其他的操作 這個文件也有兩種做法

  - 通過 **git add** 可進入暫存 **Staged** 狀態

  - 使用 **git checkout** 則丟棄修改過 返回到 **unmodify** 狀態 這個 **git checkout** 即從庫中取出文件 覆蓋當前修改

##### Staged (暫存狀態) 

- 執行 **git commit** 將修改同步到庫中 這個庫中的文件和本地文件變為一致 文件為 **Unmodify** 狀態 
- 執行 **git reset HEAD filename** 取消暫存 文件狀態為Modified



#### 查看文件狀態

```
# 查看指定文件狀態
git status [filename]

# 查看所有文件狀態
git status

# 添加所有文件到暫存區
git add .

# 提交暫存區中的內容到本地倉庫 -m 提交訊息
git commit -m "消息內容"
```



#### 忽略文件

前端項目中 npm_moudles

有時候我們不想把某些文件納入版本控制中 ex 資料庫文件 臨時文件 設計文件

可以在目錄下建立 ".gitignore"文件" 

此文件的規則

- 文件中的空行或以 # 開始的行將會被忽略
- 可以使用 Linux 通配符
  - *代表任意多個字元
  - ?代表一個字元
  - []代表可選字元範圍
  - ({String1,String2})代表可選的字串
- 如果名稱最前面有 ! 表示例外規則 將不會忽略
- 如果名稱最前面是路徑分隔號 / 表示要忽略的文件在此目錄下 而子目錄中的文件不忽略
- 如果名稱最後面是一個路徑分隔符 / 表示要忽略的是此目錄下該名稱的子目錄 而非文件(預設文件或目錄都忽略)

```
*.txt  			#忽略所有 .txt結尾的文件 這樣的話上傳就不會被選中
!lib.txt  		#但lib.txt文件例外
/temp  			#僅忽略項目根目錄下的TODO文件 不包含其他目錄temp
build/  		#忽略build/目錄下的所有文件
doc/*.txt 		#會忽略 doc/notes.txt 但不包含 doc/server/arch.txt
```



## 連接遠端資源庫

user資料夾下生成.ssh

```
ssh-keygen -t rsa
```

創建公鑰 私鑰





## IDEA連接Git

- 新建項目 綁定git
  - 將我們遠程的git文件目錄複製到項目中
- 修改文件 使用IDEA操作git
- 提交測試





## Git分支

```
# 新建一個分支 但是仍然停留在當前的分支
git branch [branch-name]
# 新建一個分支 並且切換到該分支
git checkout -b [branch]
# 合併指定分支到當前分支
git merge [branch]
# 刪除分支
git branch -d [branch-name]
# 刪除遠程分支
git push origin --delete [branch-name]
git branch -dr [remote/branch]
```

多個分支並行 可以令程式碼的執行不衝突 可以同時存在多個版本



如果同一個文件在合併分支時都被修改了 會引起衝突 

解決辦法是我們可以修改衝突文件後重新提交

master主分支應該要穩定 用來發布新版本 一般情況下不允許在上面工作 工作一般情況下在新建的dev分支上工作 工作完後 如果要發布 或是dev分支程式碼穩定後可以合併到主分支master上









