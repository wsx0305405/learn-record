# MyBatis



#### MyBaits特性

- MyBatis支持訂製化SQL 儲存過程以及高級映射優秀的持久層框架
- MyBatis避免了幾乎所有的JDBC程式碼焊手動設置參數以及獲取結果集
- MyBatis可以使用簡單的XML或註解用於配置和原始映射 將接口和Java的POJO (Plain Old Java Object , 普通的Java對象) 映射成資料庫中的記錄
- MyBatis是一個半自動的ORM (Object Relation Mapping) 框架



#### 持久層技術比較

- JDBC
  - SQL夾雜在java程式碼中耦合度高 導致編碼不易
  - 維護不易且實際開發需求中SQL有變化 頻繁修改的情況常見
  - 程式碼複雜 開發效率低
- Hibernate 和 JPA
  - 操作簡便 開發效率高
  - 程式中的複雜的SQL繞過框架
  - 內部自動生產的SQL 不容易做特殊優化
  - 基於全映射的全自動框架 大量欄位的POJO進行部分映射時比較困難
  - 反射操作太多 導致資料庫性能下降
- MyBatis
  - 輕量 性能出色
  - SQL和java編碼分開 功能邊界清晰 java程式碼專注業務處理 SQL語句專注數據處理
  - 開發效率稍微低於Hibernate



## 搭建MyBatis



#### 創建Maven工程

- 打包方式 : jar
- 引入依賴

``````xml
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.7</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.27</version>
        </dependency>
``````



#### 創建MyBatis核心配置文件

- mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- 配置連接資料庫的環境   -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>
<!-- 引入映射文件   -->
    <mappers>
        <mapper resource="org/mybatis/example/BlogMapper.xml"/>
    </mappers>
</configuration>
```



#### 創建mapper接口



#### 創建MyBatis映射文件

相關概念 : ORM (Object Relationship Mapping) 對象關係映射

- 對象 : Java的實體類對象
- 關係 : 關係型資料庫
- 映射 : 二者之間的對應關係

| Java概念 | 資料庫概念 |
| -------- | ---------- |
| 類       | 表         |
| 屬性     | 欄位/列    |
| 對象     | 資料/行    |



- SqlSession : 代表Java程式和資料庫之間的會話 (HttpSession是Java程式和瀏覽器之間的會話)
- SqlSessionFactory : 是生產 SqlSession 的工廠
- 工廠模式 : 如果創建某一個對象 使用的過程基本固定 那麼我們就可以把創建這個對象的相關程式封裝到一個工廠類中 以後都使用這個工廠類來生產我們需要的對象



#### 通過Junit測試功能

```java
public class MyBatisTest {

    /*
        sqlSession預設部自動提交事務 若需要自動提交事務
        可以使用sqlSessionFactory openSession(true)
     */
    @Test
    public void testMyBatis() throws IOException {
        // 載入核心配置文件
        InputStream is = Resources.getResourceAsStream("mybatis-config.xml");
        // 獲取SqlSessionFactoryBuilder
        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();
        // 獲取sqlSessionFactory
        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);
        // 獲取SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession(true); // 自動提交
        // 獲取Mapper接口對象
        UserMapper mapper = sqlSession.getMapper(UserMapper.class); // 代理模式
        // 測試功能
        int result = mapper.insertUser();
        // 提交事務
//        sqlSession.commit(); // 手動開啟
        System.out.println("result: " + result);
    }
}
```



#### CRUD功能



映射文件

```java
<mapper namespace="com.mapper.UserMapper">
<!-- int insertUser();   -->
    <insert id="insertUser">
        insert into user values(null,'admin2','123456',20,'男','aaa@com')
    </insert>

<!-- void updateUser();   -->
    <update id="updateUser">
        update user set username = 'ABC' where id = 4;
    </update>
<!-- void deleteUser();   -->
    <delete id="deleteUser">
        delete from user where id = 5;
    </delete>

<!-- User getUserById();   -->
    <!--
        查詢功能的標籤必須設置resultType或resultMap
        resultType : 設置預設的映射關係
        resultMap : 設置自定義的映射關係
    -->
    <select id="getUserById" resultType="com.pojo.User">
        select * from user where id = 1;
    </select>
    
<!-- List<User> getAllUser();   -->
    <select id="getAllUser" resultType="com.pojo.User">
        select * from user;
    </select>
</mapper>
```



測試

```java
@Test
    public void testCRUD() throws IOException {
        InputStream is = Resources.getResourceAsStream("mybatis-config.xml");
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
        SqlSession sqlSession = sqlSessionFactory.openSession(true);
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
//        mapper.updateUser();
//        mapper.deleteUser();
//        User user = mapper.getUserById();
        List<User> list = mapper.getAllUser();
        list.forEach(user -> System.out.println(user));
    }
```



## 核心配置文件解析

```xml
<configuration>
    <!-- 配置連接資料庫的環境
       environments : 配置多個連接資料庫的環境
       屬性 :
            default : 設置預設使用的環境的id
    -->
    <environments default="development">
        <!--
        environment : 配置某個具體的環境
        屬性 :
            id : 表示連接資料庫的環境的唯一標示 不能重複
        -->
        <environment id="development">
            <!--
                transactionManager : 設置事務管理方式
                屬性 :
                    type = "JDBC|MANAGED"
                    JDBC : 表示當前環境中 執行SQL時 使用的是JDBC中原生的事務管理方式
                           事務的提交或回滾需要手動處理
                    MANAGED : 被管理 例如Spring
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource : 配置數據源
                屬性 :
                    type : 設置數據源的類型
                    type : "POOLED|UNPOOLED|JNDI"
                    POOLED : 表示使用資料庫連接池暫存資料庫連接
                    UNPOOLED : 表示不使用資料庫連接池
                    JNDI : 表示使用上下文中的數據源
            -->
            <dataSource type="POOLED">
                <!-- 設置連接資料庫的驅動   -->
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <!-- 設置連接資料庫的連接地址   -->
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <!-- 設置連接資料庫的用戶名   -->
                <property name="username" value="root"/>
                <!-- 設置連接資料庫的密碼   -->
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>
<!-- 引入映射文件   -->
    <mappers>
        <mapper resource="mappers/UserMapper.xml"/>
    </mappers>
</configuration>
```



#### 核心配置文件properties

properties

```properties
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/mybatis
jdbc.username=root
jdbc.password=123456
```



配置文件

```xml
<configuration>

<!-- 引入properties文件   -->
    <properties resource="jdbc.properties"></properties>
    
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            
            <dataSource type="POOLED">
                <!-- 設置連接資料庫的驅動  獲取配置文件 $  -->
                <property name="driver" value="${jdbc.driver}"/>
                <!-- 設置連接資料庫的連接地址   -->
                <property name="url" value="${jdbc.url}"/>
                <!-- 設置連接資料庫的用戶名   -->
                <property name="username" value="${jdbc.username}"/>
                <!-- 設置連接資料庫的密碼   -->
                <property name="password" value="${jdbc.password}"/>
            
            </dataSource>
        </environment>
    </environments>
	<!-- 引入映射文件   -->
    <mappers>
        <mapper resource="mappers/UserMapper.xml"/>
    </mappers>
</configuration>
```



#### 核心配置文件typeAliases

類型別名

```xml
<configuration>
<!--  設置類型別名  -->
    <typeAliases>
        <!--
        typeAlias : 設置某個類型的別名
        屬性:
            type : 設置需要設置別名的類型
            alias : 設置某個類型的別名  不區分大小寫
                    若不設置則預設為不區分大小寫的類別名User user
        -->
        <typeAlias type="com.pojo.User" alias="User"></typeAlias>
        <!--  以包為單位 將包下所有的類型設置預設的類型別名 (即類名不區分大小寫)    -->
        <package name="com.pojo"/>
    </typeAliases>

</configuration>
```



#### 核心配置文件mappers



在resources創建包 使用 / 分隔

resources中的配置文件需要與java中包的路徑一致 才可以使用package

```xml
 <!-- 引入映射文件   -->
    <mappers>
<!--        <mapper resource="mappers/UserMapper.xml"/>-->
        <!--
            以包為單位引入映射文件
            要求 :
            1. mapper接口所在的包要和映射文件所在的包一致
            2. mapper接口要和映射文件的名字一致
        -->
        <package name="com.mapper"/>
    </mappers>
```





## MyBatis獲取參數的兩種方式



- ${} 本質字串拼接 
  - 需要手動加上單引號
  - 會有SQL注入問題

- #{} 本質佔位符賦值



#### 單個字面量

```xml
<mapper namespace="com.mybatis.mapper.ParameterMapper">

<!-- User getUserByUsername(String username);  -->
    <select id="getUserByUsername" resultType="User">
<!--      select * from user where username = #{username} -->
        select * from user where username = '${username}'
    </select>

</mapper>
```



```java
/*+
    MyBatis獲取參數的兩種方式 : ${} #{}
    ${} 本質字串拼接
    #{} 本質佔位符賦值
    MyBatis獲取參數值的各種情況:
    1. mapper接口方法的參數為單個的字面量類型
       可以通過${}和#{}以任意的名稱獲取參數值
       但是需要注意${}的單引號問題 (字串拼接)
 */
@Test
public void testGetUserByUsername(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);
    User user = mapper.getUserByUsername("admin2");
    System.out.println(user);
}
```



#### 多個字面量-自動設置Map

多個參數 mybatis會將參數放到Map中 [arg1, arg0, param1, param2]



```xml
<mapper namespace="com.mybatis.mapper.ParameterMapper">

<!-- User checkLogin(String username,String password);   -->
    <select id="checkLogin" resultType="User">
<!--         select * from user where username = #{arg0} and password = #{arg1} -->
        select * from user where username = '${param1}' and password = '${param2}'
    </select>

</mapper>
```



```java
/*
2. mapper接口方法的參數為多個時
    此時MyBatis會將這些參數放在一個Map集合中 以兩種方式進行儲存
    a > 以arg0,arg1...為鍵 以參數為值
    b > 以param1,param2..為鍵 以參數為值
    因此只需要通過#{}和${}以鍵的方式訪問值即可 但是要注意${}的單引號問題
*/
    
@Test
    public void testCheckLogin(){
        SqlSession sqlSession = SqlSessionUtils.getSqlSession();
        ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);
        User user = mapper.checkLogin("admin2","123456");
        System.out.println(user);
    }    
```



#### 多個字面量-手動設置Map



```xml
<mapper namespace="com.mybatis.mapper.ParameterMapper">

<!-- User checkLoginByMap(Map<String,Object> map);   -->
    <select id="checkLoginByMap" resultType="User">
        select * from user where username = #{username} and password = #{password}
    </select>

</mapper>
```



```java
/*
	3. 若mapper接口方法的參數有多個時 可以手動將這些參數放在一個map中儲存
   	   只需要通過#{}和${}以鍵的方式訪問值即可 但是要注意${}的單引號問題
*/
@Test
    public void testCheckLoginByMap(){
        SqlSession sqlSession = SqlSessionUtils.getSqlSession();
        ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);
        Map<String,Object> map = new HashMap<>();
//      自定義 key-value
        map.put("username","admin2");
        map.put("password","123456");
        User user = mapper.checkLoginByMap(map);
        System.out.println(user);
    }
```



#### 實體類類型參數

以屬性的方式訪問 (get set方法)



```xml
<!-- int insertUser(User user);   -->
    <insert id="insertUser">
        insert into user values (null,#{username},#{password},#{age},#{gender},#{email})
    </insert>
```



```java
/*
	4. mapper接口方法的參數是實體類類型的參數
       只需要通過#{}和${}以屬性的方式訪問屬性值即可 但是需要注意${}的單引號問題
*/
@Test
    public void testInsertUser(){
        SqlSession sqlSession = SqlSessionUtils.getSqlSession();
        ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);
        int result = mapper.insertUser(new User(null, "AAA", "12345", 21, "男", "AAA@com"));
        System.out.println(result);
    }
```



#### 使用@Param命名(key)



```xml
<!-- User checkLoginByParam(@Param("username") String username,@Param("password") String password);   -->
    <select id="checkLoginByParam" resultType="User">
        select * from user where username = #{username} and password = #{password}
    </select>
```



```java
/*
   5. 使用@Param註解命名參數(key)
      此時MyBatis會將這些參數放在一個Map集合中 以兩種方式進行儲存
      a > 以@Param註解的值為鍵 以參數為值
      b > 以param1,param2為鍵 以參數為值
      因此只需要通過#{}和${}以鍵的方式訪問值即可 但是需要注意${}的單引號問題
*/

@Test
    public void testCheckLoginByParam(){
        SqlSession sqlSession = SqlSessionUtils.getSqlSession();
        ParameterMapper mapper = sqlSession.getMapper(ParameterMapper.class);
        User user = mapper.checkLoginByParam("admin2", "123456");
        System.out.println(user);
    }
```





## MyBatis的查詢功能



```j
MyBatis的各種查詢功能
1. 若查詢出的數據只有一條
   a> 可以通過實體類對象接收
   b> 可以通過List集合接收
   c> 可以通過map集合接收
      結果 : {password=12345, gender=男, id=3, age=21, email=AAA@com, username=AAA}
2. 若查詢出的數據有多條
   a> 可以通過List集合接收
   b> 可以通過map類型的List集合接收
   c> 可以在mapper接口的方法上添加@MapKey註解 此時就可以將每條數據轉換的map集合作為值
      以某個欄位的值作為key 放在同一個map集合中
   一定不能通過實體類對象接收 此時會拋異常TooManyResultsException

MyBatis中設置了預設的類型別名
java.lang.Integer --> int,integer
int --> _int,_integer
Map --> map
String --> string
```



#### 查詢一個實體類對象

```xml
<!-- User getUserById(@Param("id") Integer id); -->
    <select id="getUserById" resultType="User">
        select * from user where id = #{id}
    </select>
```



```java
@Test
public void testGetUserById(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SelectMapper mapper = sqlSession.getMapper(SelectMapper.class);
    System.out.println(mapper.getUserById(2));
}
```



#### 查詢一個list集合

```xml
<!-- List<User> getAllUser();   -->
    <select id="getAllUser" resultType="User">
        select * from user
    </select>
```



```java
@Test
public void testAllUser(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SelectMapper mapper = sqlSession.getMapper(SelectMapper.class);
    System.out.println(mapper.getAllUser());
}
```



#### 查詢單個數據

```xml
<!-- Integer getCount();   -->
    <select id="getCount" resultType="java.lang.Integer">
        select count(*) from user
    </select>
```



```java
@Test
public void testGetCount(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SelectMapper mapper = sqlSession.getMapper(SelectMapper.class);
    System.out.println(mapper.getCount());
}
```



#### 查詢一條數據為map集合

```xml
<!-- Map<String,Object> getUserByIdToMap(@Param("id") Integer id);   -->
    <select id="getUserByIdToMap" resultType="map">
        select * from user where id = #{id}
    </select>
```



```java
@Test
public void testGetUserByIdToMap(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SelectMapper mapper = sqlSession.getMapper(SelectMapper.class);
    System.out.println(mapper.getUserByIdToMap(3));
}
```



#### 查詢多條數據為map集合



兩種方式

```java
// 查詢所有用戶訊息為map集合
//    List<Map<String,Object>> getAllUserToMap();
    @MapKey("id")
    Map<String,Object> getAllUserToMap();
```



```xml
<!-- List<Map<String,Object>> getAllUserToMap();   -->
    <select id="getAllUserToMap" resultType="map">
        select * from user
    </select>
```



```java
@Test
public void testGetAllUserToMap(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SelectMapper mapper = sqlSession.getMapper(SelectMapper.class);
    System.out.println(mapper.getAllUserToMap());
}
```



## 特殊SQL的執行



#### 模糊查詢

- select * from user where username like '%${username}%'  -->  字串拼接
  -  '%#{username}%'   --> '%?%'   使用#  會將?變成字串 導致無法讀取參數
- select * from user where username like concat('%',#{username},'%')
  - 使用concat拼接  則可以使用#
- select * from user where username like "%"#{username}"%"  --> 較常使用

```xml
<!-- List<User> getUserByLike(@Param("username") String username);   -->
    <select id="getUserByLike" resultType="User">
<!--         select * from user where username like '%${username}%' -->
<!--         select * from user where username like concat('%',#{username},'%') -->
        select * from user where username like "%"#{username}"%"
    </select>
```



#### 批量刪除

- 通過in進行批量刪除
  - 使用 #{} 會在傳入的參數中 加上 ' '  不符合in的格式
  - 必須使用${}的方式傳入參數才符合格式

```xml
<!--     int deleteMore(@Param("ids")String ids);   -->
    <delete id="deleteMore">
        delete from user where id in (${ids});
    </delete>
```



```java
@Test
public void testDeleteMore(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SQLMapper mapper = sqlSession.getMapper(SQLMapper.class);
    mapper.deleteMore("3,4,5");
}
```



#### 動態設置表名

- 表名不能使用 #{} 因為會自動加入 ' ' 

```xml
<!-- List<User> getUserByTableName(@Param("tableName") String tableName);   -->
    <select id="getUserByTableName" resultType="User">
        select * from ${tableName}
    </select>
```



```java
@Test
public void testGetUserByTableName(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SQLMapper mapper = sqlSession.getMapper(SQLMapper.class);
    List<User> list = mapper.getUserByTableName("user");
    System.out.println(list);
}
```



#### 添加功能獲取自增的主鍵

class(classId,ClassName)

student(studentId,studentName,classId)

- 添加班級訊息
- 獲取新添加的班級的id
- 為班級分配學生 即將某個學生的班級id修改為新添加的班級的id

```xml
<!--
        void insertUser(User user);
        useGeneratedKeys : 設置當前標籤中的sql使用了自增的id
        keyProperty : 將自增的主鍵的值賦值給傳輸到映射文件中參數的某個屬性
-->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        insert into user values(null,#{username},#{password},#{age},#{gender},#{email})
    </insert>
```



```java
@Test
public void testInsertUser(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    SQLMapper mapper = sqlSession.getMapper(SQLMapper.class);
    User user = new User(null,"BBB","12345",20,"女","bbb@com");
    mapper.insertUser(user);
    System.out.println(user);
}
```



## 自定義映射resultMap



#### 欄位名和屬性名不一致

```
解決欄位名和屬性名不一致的情況
a> 為欄位設置別名 保持和屬性名的一致
b> 設置全域配置 當_自動映射為駝峰
   <setting name="mapUnderscoreToCamelCase" value="true"/>
c> 通過resultMap設置自定義的映射關係
```

- 設置別名

```xml
<!-- List<Emp> getAllEmp();   -->
    <select id="getAllEmp" resultType="Emp">
        select eid,emp_name empName,age,gender,email from emp
    </select>
```

- 設置Mybatis的全域配置

```xml
<!-- 設置Mybatis的全域配置   -->
<settings>
    <!--  將_映射為駝峰  emp_name -> empName      -->
    <setting name="mapUnderscoreToCamelCase" value="true"/>
</settings>
```

- 通過resultMap設置

```xml
<!--
           resultMap : 設置自定義映射關係
           id : 唯一標示 不能重複
           type : 設置映射關係中的實體類類型
           子標籤 :
           id : 設置主鍵的元素關係
           result : 設置普通欄位的映射關係
           屬性 :
           property : 設置映射關係中的屬性名 必須是type屬性所設置的實體類類型中的屬性名
           column : 設置映射關係中的欄位名 必須是sql語句查詢出的欄位名

        -->
    <resultMap id="empResultMap" type="Emp">
        <!--  id設置主鍵       -->
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="gender" column="gender"></result>
        <result property="age" column="age"></result>
        <result property="email" column="email"></result>
    </resultMap>
    
<!-- List<Emp> getAllEmp();   -->
    <select id="getAllEmp" resultMap="empResultMap">
        select * from emp
    </select>
```



#### 多對一的映射關係

```
處理多對一的映射關係
a> 級聯屬性賦值
b> association
c> 分步查詢
```

##### 級聯屬性賦值

```xml
<!-- List<Emp> getEmpAndDept(@Param("eid") Integer eid);   -->
<select id="getEmpAndDept" resultMap="empAndDeptResultMapOne">
    select * from emp
    left join dept
    on emp.did = dept.did
    where emp.did = #{eid}
</select>

<!-- 處理多對一映射關係  方式一 : 級聯屬性賦值 -->
<resultMap id="empAndDeptResultMapOne" type="Emp">
    <id property="eid" column="eid"></id>
    <result property="empName" column="emp_name"></result>
    <result property="age" column="age"></result>
    <result property="gender" column="gender"></result>
    <result property="email" column="email"></result>
    <result property="dept.did" column="did"></result>
    <result property="dept.deptName" column="dept_name"></result>
</resultMap>
```



```java
@Test
public void testGetEmpAndDept(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    List<Emp> empAndDept = mapper.getEmpAndDept(1);
    for (Emp emp : empAndDept) {
        System.out.println(emp);
    }
}
```



##### association-javaType

```xml
<!-- 處理多對一映射關係  方式二 : association -->
<resultMap id="empAndDeptResultMapTwo" type="Emp">
    <id property="eid" column="eid"></id>
    <result property="empName" column="emp_name"></result>
    <result property="age" column="age"></result>
    <result property="gender" column="gender"></result>
    <result property="email" column="email"></result>
    <!--
         association : 處理多對一的映射關係
         property : 需要處理多對一的映射關係的屬性名 (Emp的dept)
         javaType : 該屬性的類型 (dept對應的類別 Dept)
         -->
    <association property="dept" javaType="Dept">
        <id property="did" column="did"></id>
        <result property="deptName" column="dept_name"></result>
    </association>
</resultMap>
```



##### 分步查詢

EmpMapper

```xml
<!-- 
    通過分布查詢 查詢員工以及員工所對應的部門訊息
    分布查詢第一步 : 查詢員工訊息
    List<Emp> getEmpAndDeptByStepOne(@Param("eid")Integer eid);   -->
<select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStepResultMap">
    select * from emp where eid = #{eid}
</select>

<resultMap id="empAndDeptByStepResultMap" type="Emp">
    <id property="eid" column="eid"></id>
    <result property="empName" column="emp_name"></result>
    <result property="age" column="age"></result>
    <result property="gender" column="gender"></result>
    <result property="email" column="email"></result>
    <!--
        select : 設置分步查詢的sql的唯一標示 (namespace,SQLId或mapper接口的全類名.方法名)
        column : 設置分步查詢的條件
    -->
    <association property="dept"
                 select="com.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                 column="did"></association>
</resultMap>
```

DeptMapper

```xml
<!-- 通過分布查詢 查詢員工以及員工所對應的部門訊息
     分布查詢第二步 : 通過did查詢員工所對應的部門
     Dept getEmpAndDeptByStepTwo(@Param("did") Integer did); -->
    <select id="getEmpAndDeptByStepTwo" resultType="Dept">
        select * from dept where did = #{did}
    </select>
```



```java
@Test
public void testGetEmpAndDeptByStep(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    List<Emp> list = mapper.getEmpAndDeptByStepOne(3);
    for (Emp emp : list) {
        System.out.println(emp);
    }
}
```

執行過程

``````
[com.mybatis.mapper.EmpMapper.getEmpAndDeptByStepOne]-==>  Preparing: select * from emp where eid = ?
[com.mybatis.mapper.EmpMapper.getEmpAndDeptByStepOne]-==> Parameters: 3(Integer)
[com.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo]-====>  Preparing: select * from dept where did = ?
[com.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo]-====> Parameters: 3(Integer)
``````



#### 延遲載入

分布查詢的優點 : 可以實現延遲載入 但是必須在核心配置文件中設置全域配置訊息

- lazyLoadingEnabled : 延遲載入的全域開關 當開啟時 所有關聯對象都會延遲載入
- aggressiveLazyLoading : 當開啟時 任何方法的調用都會載入該對象的所有屬性 否則 每個屬性會按需載入
- 此時就可以實現按需載入 獲取的數據是什麼 就只會執行相應的sql 此時可以通過association和collection中的fechType屬性設置當前的分步查詢是否使用延遲載入
  - fetchType = "lazy(延遲載入) | eager(立即載入)"

```xml
    <settings>
		<!--    開始延遲載入    -->
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
```



```xml
<resultMap id="empAndDeptByStepResultMap" type="Emp">
    <id property="eid" column="eid"></id>
    <result property="empName" column="emp_name"></result>
    <result property="age" column="age"></result>
    <result property="gender" column="gender"></result>
    <result property="email" column="email"></result>
    <!--
        select : 設置分步查詢的sql的唯一標示 (namespace,SQLId或mapper接口的全類名.方法名)
        column : 設置分步查詢的條件
        fetchType : 當開啟了全域的延遲載入後 可以通過此屬性手動控制延遲載入的效果
        fetchType="lazy|eager" : lazy表示延遲載入 eager表示立即載入
    -->
    <association property="dept"
                 select="com.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                 column="did"
                 fetchType="eager">
    </association>
</resultMap>
```





#### 一對多映射關係

```
處理一對多的映射關係
a> collection
b> 分步查詢
```

##### collection-ofType

```xml
<!-- Dept getDeptAndEmp(@Param("did") Integer did);   -->
    <select id="getDeptAndEmp" resultMap="deptAndEmpResultMap">
        select * from dept
        left join emp
        on dept.did = emp.did
        where dept.did = #{did}
    </select>

    <resultMap id="deptAndEmpResultMap" type="Dept">
        <id property="did" column="did"></id>
        <result property="deptName" column="dept_name"></result>
        <!--
            collection : 處理一對多的映射關係
            ofType : 表示該屬性所對應的集合中儲存數據的類型
             -->
        <collection property="emps" ofType="Emp">
            <id property="eid" column="eid"></id>
            <result property="empName" column="emp_name"></result>
            <result property="age" column="age"></result>
            <result property="gender" column="gender"></result>
            <result property="email" column="email"></result>
        </collection>
    </resultMap>
```



##### 分步查詢

```xml
<!-- 通過分步查詢查詢部門以及部門中所有的員工訊息
     分步查詢第一步 : 查詢部門訊息
     Dept getDeptAndEmpByStepOne(@Param("did") Integer did);   -->
    <select id="getDeptAndEmpByStepOne" resultMap="deptAndEmpByStepResultMap">
        select * from dept where did = #{did}
    </select>
    
    <resultMap id="deptAndEmpByStepResultMap" type="Dept">
        <id property="did" column="did"></id>
        <result property="deptName" column="dept_name"></result>
        <collection property="emps"
                    select="com.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo"
                    column="did">
        </collection>
    </resultMap>
```



```xml
<!-- 通過分步查詢查詢部門以及部門中所有的員工訊息
     分步查詢第二步 : 根據did查詢員工訊息
     List<Emp> getDeptAndEmpByStepTwo(@Param("did") Integer did);   -->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from emp where did = #{did}
    </select>
```



## 動態SQL

Mybatis框架的動態SQL技術是一種根據特定條件動態拼裝SQL語句的功能 他存在的意義是為了解決拼接SQL語句字串時的問題



#### if

```
動態SQL
1. if:根據標籤中test屬性所對應的表達式決定標籤中的內容是否需要拼接到SQL中
```

- 根據if標籤決定SQL內容的拼接
  - 使用 where 1 = 1 確保不會出錯

```xml
<!-- List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition" resultType="Emp">
        select * from emp where 1=1
        <if test="empName != null and empName != ''">
            emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
        <if test="email != null and email != ''">
            and email = #{email}
        </if>
    </select>
```



#### where標籤

```
2. where : 當where標籤中有內容時 會自動生成where關鍵字 並且將內容前多餘的and 或 or 去掉
           當where標籤中沒有內容時 此時where標籤會沒有任何效果 (不生成)
   注意點 : where標籤不能將其中內容後面多餘的and 或 or 去掉
```

```xml
<!-- List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition" resultType="Emp">
        select * from emp
        <where>
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
        </where>
    </select>
```



#### trim標籤

```
3. trim :
若標籤中有內容時
prefix|suffix : 將trim標籤中內容前面或後面添加指定內容
suffixOverrides|prefixOverrides : 將trim標籤中內容前面或後面去掉指定內容
若標籤中沒有內容時 --> trim標籤也沒有任何效果
```



```xml
<!-- List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition" resultType="Emp">
        select * from emp
        <trim prefix="where" suffixOverrides="and|or">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                 age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender} and
            </if>
            <if test="email != null and email != ''">
                email = #{email}
            </if>
        </trim>
    </select>
```



#### choose標籤

```
4. choose,when,otherwise 相當於 if...else if...else
when至少要有一個 otherwise最多只能有一個
```



```xml
<!-- List<Emp> getEmpByChoose(Emp emp);   -->
    <select id="getEmpByChoose" resultType="Emp">
        select * from emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
                <when test="email != null and email != ''">
                    email = #{email}
                </when>
                <otherwise>
                    did = 1
                </otherwise>
            </choose>
        </where>
    </select>
```



#### foreach標籤

```
5. foreach
collection : 設置需要循環的陣列或集合
item : 表示陣列或集合中的每一個數據
separator : 循環體之間的分隔符
open : foreach標籤所循環所有內容的開始符
close : foreach標籤所循環所有內容的結束符
```

##### 批量刪除

- 方法一

```xml
<!-- int deleteMoreByArray(@Param("eids") Integer[] eids);   -->
    <delete id="deleteMoreByArray">
        delete from emp where eid in 
        <foreach collection="eids" item="eid" separator="," open="(" close=")">
            #{eid}
        </foreach>
    </delete>
```

- 方法二

```xml
    <delete id="deleteMoreByArray">
        delete from emp where
        <foreach collection="eids" item="eid" separator="or">
            eid = #{eid}
        </foreach>
    </delete>
```



```java
@Test
public void testDeleteMoreByArray(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);
    int result = mapper.deleteMoreByArray(new Integer[]{6, 7, 8});
    System.out.println(result);
}
```



##### 批量添加

```xml
<!-- int insertMoreByList(List<Emp> emps);   -->
    <insert id="insertMoreByList">
        insert into emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},#{emp.email},null)
        </foreach>
    </insert>
```



```java
@Test
public void testInsertMoreByList(){
    SqlSession sqlSession = SqlSessionUtils.getSqlSession();
    DynamicSQLMapper mapper = sqlSession.getMapper(DynamicSQLMapper.class);
    Emp emp1 = new Emp(null,"a",20,"男","aaa@com");
    Emp emp2 = new Emp(null,"a",20,"男","aaa@com");
    Emp emp3 = new Emp(null,"a",20,"男","aaa@com");
    List<Emp> emps = Arrays.asList(emp1, emp2, emp3);
    System.out.println(mapper.insertMoreByList(emps));

}
```





## MyBatis的暫存



#### MyBatis一級暫存

一級暫存屬於SqlSession級別 通過同一個SqlSession查詢的數據會被暫存 下次查詢相同的數據 就會從暫存中直接獲取 不會從資料庫重新訪問

使一級暫存失效的四種情況

- 不同的SqlSession對應不同的一級暫存
- 同一個SqlSession但是查詢條件不同
- 同一個SqlSession兩次查詢期間執行了任何一次增刪改操作
- 同一個SqlSession兩次查詢期間手動清空了暫存

``````
sqlSession.clearCache();
``````



#### MyBatis二級暫存

二級暫存是SqlSessionFactory級別 通過同一個sqlSessionFactory創建的SqlSession查詢的結果會被暫存 此後若再次執行相同的查詢語句 結果就會從暫存中獲取

二級暫存開啟的條件

- 在核心配置文件中 設置全局配置屬性cacheEnabled="true" , 預設為true  不需要設置
- 在映射文件中設置標籤<cache/\>
- 二級暫存必須在SqlSession關閉後提交後才有效
- 查詢的數據所轉換的實體類類型必須實現序列化的接口

使二級暫存失效的情況

- 兩次查詢之間執行了任意的增刪改 會使一級和二級暫存同時失效



```java
@Test
public void testTwoCache(){
    try {
        InputStream is = Resources.getResourceAsStream("mybatis-config.xml");
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
        SqlSession sqlSession1 = sqlSessionFactory.openSession(true);
        SqlSession sqlSession2 = sqlSessionFactory.openSession(true);
        CacheMapper mapper1 = sqlSession1.getMapper(CacheMapper.class);
        System.out.println(mapper1.getEmpByEid(1));
        sqlSession1.close();
        CacheMapper mapper2 = sqlSession2.getMapper(CacheMapper.class);
        System.out.println(mapper2.getEmpByEid(1));
        sqlSession2.close();

    } catch (IOException e) {
        e.printStackTrace();
    }
}
```



#### 二級暫存的相關配置

在mapper配置文件中添加的cache標籤可以設置的屬性

- eviction屬性 : 暫存回收策略

  - LRU (Least Recently Used) 最近最少使用的 移除最長時間不被使用的對象
  - FIFO (First in First out) 先進先出 按對象進入暫存的順序來移除他們
  - SOFT 軟硬用 : 移除基於垃圾回收器狀態和軟引用規則的對象
  - WEAK  弱引用 : 更積極的移除基於垃圾回收器狀態和弱引用規則的對象

  預設是LRU

- flushInterval屬性 : 刷新間隔 單位為毫秒

  - 預設情況是不設置 也就是沒有刷新間隔˙暫存僅僅調用語句時刷新 

- size屬性 :  引用數目 正整數

  - 代表暫存最多可以儲存多少個對象 太大容易導致記憶體溢出

- readOnly屬性 : 唯獨 true/false

  - true : 唯獨暫存
    - 會給所有調用者返回暫存對象的相同實例 因此這些對象不能被修改 這提供了很重要的性能優勢
  - false : 讀寫暫存
    - 會返回暫存對象的複製 (通過序列化) 會較花時間 但是安全 因此預設為false



#### MyBatis暫存查詢的順序

- 先查詢二級暫存 因為二級暫存中可能會有其他程式已經查出來的數據 可以直接拿來使用
- 如果二級暫存沒有命中 再查詢一級暫存
- 如果一級暫存也沒有命中 則查詢資料庫
- SqlSession關閉之後 一級暫存中的數據會寫入二級暫存



## MyBatis的逆向工程

- 正向工程 : 先創建Java實體類 由框架負責根據實體類生成資料庫表 Hibernate支持正向工程
- 逆向工程 : 先創建資料庫表 由框架負責根據資料庫表 反向生成如下的資源
  - Java實體類
  - Mapper接口
  - Mapper映射文件

#### 

## MyBatis分頁插件

```
limit index,pageSize
index : 當前頁的起始索引
pageSize : 每頁顯示的條數
pageNum : 當前頁的頁碼
index = (pageNum-1) * pageSize

使用MyBatis的分頁插件實現分頁功能
1. 需要在查詢功能之前開啟分頁
PageHelper.startPage(int pageNum,int PageSize);
2. 在查詢功能之後獲取分頁相關訊息
PageInfo<Emp> page = new PageInfo<>(list, 5);
list : 分頁數據
5 : 當前導航分頁的數量
```



#### 添加依賴

```xml
<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper -->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper</artifactId>
    <version>5.2.0</version>
</dependency>

```



#### 設置分頁插件

``````xml
<plugins>
	<plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
</plugins>
``````



#### 分頁插件應用

PageInfo{pageNum=2, pageSize=4, size=4, startRow=5, endRow=8, total=9, pages=3,  

prePage=1, nextPage=3, isFirstPage=false, isLastPage=false, hasPreviousPage=true, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=3, navigatepageNums=[1, 2, 3]}

- 常用數據

``````
pageNum : 當前頁的頁碼
pageSize : 每頁顯示的條數
size : 當前頁顯示的真實條數
total : 總記錄樹
pages : 總頁數
prePage : 上一頁的頁碼
nextPage : 下一頁的頁碼
isFirstPage/isLastPage : 是否為第一頁/最後一頁
hasPreviousPage/hasNextPage : 斥否存在上一頁/下一頁
navigatePages : 導航分頁的頁碼數
navigatepageNums : 導航分頁的頁碼 [1,2,3,4,5]
``````

